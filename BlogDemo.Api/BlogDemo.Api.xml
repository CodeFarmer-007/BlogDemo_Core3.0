<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogDemo.Api</name>
    </assembly>
    <members>
        <member name="T:BlogDemo.Api.AOP.BlogCacheAOP">
            <summary>
            面向切面的缓存使用  【缓存拦截器】
            </summary>
        </member>
        <member name="T:BlogDemo.Api.AOP.BlogLogAOP">
            <summary>
            拦截器 BlogLogAOP 继承 IInterceptor接口
            </summary>
        </member>
        <member name="M:BlogDemo.Api.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化 IInerceptor 唯一方式
            </summary>
            <param name="invocation">包含拦截方法的信息</param>
        </member>
        <member name="M:BlogDemo.Api.AOP.BlogLogAOP.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            判断是否是异步方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogDemo.Api.AOP.BlogRedisCacheAOP">
            <summary>
            面向切面的缓存使用  【Redis缓存截器】
            </summary>
        </member>
        <member name="T:BlogDemo.Api.AOP.CacheAOPbase">
            <summary>
            抽象类
            </summary>
        </member>
        <member name="M:BlogDemo.Api.AOP.CacheAOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:BlogDemo.Api.AOP.CacheAOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:BlogDemo.Api.AOP.CacheAOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:BlogDemo.Api.AuthHelper.JwtHelper">
            <summary>
            JWT由 头【指定JWT字符串的加密规则】、PayLoad【报文、显示已注册声明】、加密签名 三部分组成
            </summary>
        </member>
        <member name="M:BlogDemo.Api.AuthHelper.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:BlogDemo.Api.AuthHelper.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:BlogDemo.Api.AuthHelper.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BlogDemo.Api.AuthHelper.TokenModelJwt.Phone">
            <summary>
            手机
            </summary>
        </member>
        <member name="P:BlogDemo.Api.AuthHelper.TokenModelJwt.Icon">
            <summary>
            头像
            </summary>
        </member>
        <member name="P:BlogDemo.Api.AuthHelper.TokenModelJwt.UNickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:BlogDemo.Api.AuthHelper.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:BlogDemo.Api.AuthHelper.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:BlogDemo.Api.Controllers.AdvertisementController">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:BlogDemo.Api.Controllers.AdvertisementController.GetInfo">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogDemo.Api.Controllers.LoginController.GetJwtToken(System.String,System.String)">
            <summary>
            获取Token令牌
            </summary>
            <param name="userId"></param>
            <param name="userpass"></param>
            <returns></returns>
        </member>
        <member name="M:BlogDemo.Api.Controllers.TodoItemsController.GetTodoItems">
            <summary>
            注释TodoItems
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogDemo.Api.Controllers.TodoItemsController.GetThisAction(BlogDemo.Core.Model.ViewModels.Love)">
            <summary>
            Love类注释显示
            </summary>
            <param name="model">Love实体参数</param>
            <returns></returns>
        </member>
        <member name="T:BlogDemo.Api.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常处理日志
            </summary>
        </member>
        <member name="M:BlogDemo.Api.Filter.GlobalExceptionsFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            实现 IExceptionFilter
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:BlogDemo.Api.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:BlogDemo.Api.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:BlogDemo.Api.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境
            </summary>
        </member>
        <member name="T:BlogDemo.Api.Startup">
            <summary>
            启动文件配置 【依赖注入，跨域请求，Redis缓存等】
            </summary>
        </member>
        <member name="M:BlogDemo.Api.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
             新增服务 注入到Autofac 容器
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:BlogDemo.Api.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义Api版本
            </summary>
        </member>
        <member name="F:BlogDemo.Api.SwaggerHelper.CustomApiVersion.ApiVersions.v1">
            <summary>
            v1 版本
            </summary>
        </member>
        <member name="F:BlogDemo.Api.SwaggerHelper.CustomApiVersion.ApiVersions.v2">
            <summary>
            v2 版本
            </summary>
        </member>
        <member name="T:BlogDemo.Api.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:BlogDemo.Api.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:BlogDemo.Api.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:BlogDemo.Api.SwaggerHelper.CustomRouteAttribute.#ctor(BlogDemo.Api.SwaggerHelper.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="version"></param>
            <param name="actionName"></param>
        </member>
    </members>
</doc>
